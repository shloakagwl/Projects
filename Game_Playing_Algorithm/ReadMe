
Programming language: Python
IDE: Anaconda (Spyder)

The task is to implement an agent that plays the Max-Connect4 game using search. The game is played on a 6x7 grid, with six rows and seven columns. There are two players, player A (red) and player B (green). The two players take turns placing pieces on the board: the red player can only place red pieces, and the green player can only place green pieces. It is best to think of the board as standing upright. We will assign a number to every row and column, as follows: columns are numbered from left to right, with numbers 1, 2, ..., 7. Rows are numbered from bottom to top, with numbers 1, 2, ..., 6. When a player makes a move, the move is completely determined by specifying the COLUMN where the piece will be placed. If all six positions in that column are occupied, then the move is invalid, and the program should reject it and force the player to make a valid move. In a valid move, once the column is specified, the piece is placed on that column and "falls down", until it reaches the lowest unoccupied position in that column.

The game is over when all positions are occupied. Obviously, every complete game consists of 42 moves, and each player makes 21 moves. The score, at the end of the game is determined as follows: consider each quadruple of four consecutive positions on board, either in the horizontal, vertical, or each of the two diagonal directions (from bottom left to top right and from bottom right to top left). The red player gets a point for each such quadruple where all four positions are occupied by red pieces. Similarly, the green player gets a point for each such quadruple where all four positions are occupied by green pieces. The player with the most points wins the game. 

Your program will run in two modes: an interactive mode, that is best suited for the program playing against a human player, and a one-move mode, where the program reads the current state of the game from an input file, makes a single move, and writes the resulting state to an output file. The one-move mode can be used to make programs play against each other.

--------------
Code Structure
--------------
There are two file:
1.maxconnect4.py
It contains main part function. Basically it contains two mode: one-move mode and interactive mode. 
It contains 
+main function which reads the arguments and redirect to suitalble function according to mode.
+oneMoveMode function which take input file and computer computes the next turns and displays the game borad.
+interactiveMode functions depending who is the next turn is, it goes to humanPlay() or aiPlay().
+humanPlay function which takes the raw int input for the human player and checks wheather it is vaild move and changes the trun to computer.

2.MaxConnect4Game.py
It contains the all the supporting files that is minmax, alpha-beta, beta-aplha and eval function.
+checkPieceCount function checking if count the number of piece already played
+getPieceCount function returning the total piece of the borad which are occupied
+displayGB function display the game borad
+printGameBoardToFile function for printing the game borad to file
+playPiece function for placing the current player piece in the column
+checkPiece function for checking if the piece is valid or not
+maxVal function for resturing the state for the maximun value
+minVal function for returning the state for the minimun value
+alphaBeta function for alpha beta puring (max val)
+betaAlpha function for beta alpha puring (min val)
+minMax plain min max algorithm
+verticalCheck checking the vertical piece in the row
+horizontalCheck checking for the horizontal piece in the column
+diagonalCheck checking for the diagonal check in the borad
+streakCalc function for checking which type of connectfour goes
+playerEvalCalc calculating the streak for the non computer player
+evalFunc function for the which next color is 
+compEvalCalc calculating the streak for the computer
+evalCalc function for calucating the difference in the steak of computer vs non computer
+changeMove function for changing to next player 
+aiPlay function for computing the computer move
+scoreCount function for returning the score count i.e. fours in a row

------------
Run the code
----------------
Interactive Mode
----------------
python maxconnect4.py interactive inputfile.txt computer-next/human-next depth_level

-------------
One-Move Mode
-------------
python maxconnect4.py one-move inputfile.txt outputfile.txt depth_level

References:
https://github.com/Cledersonbc/tic-tac-toe-minimax
https://omega.uta.edu/~gopikrishnav/classes/common/4308_5360/slides/Game_Search.pdf
https://codereview.stackexchange.com/questions/24764/tic-tac-toe-victory-check
http://aima.cs.berkeley.edu/python/games.html
https://inventwithpython.com/chapter10.html
