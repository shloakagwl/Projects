/*
Program is of finding the optimal path between the cities and
printing the node expanded distance and the path
*/

import java.io.BufferedReader; //Class for reading the text from character input stream
import java.io.File;    //Import file class
import java.io.FileReader;  //Class for reading data from file
import java.io.IOException; //Class fro input output throw
import java.util.*;

/*Class define for storing the current node city, parent that city and the cost of the path*/
class Node{
    int pCost;  //for path cost between parent and the city
    int hCost;  //for heuristic path cost between parent and the city
    String city;    //value of the node that is the city
    Node parent;    //parent is the city connecting the current city
    Node(String city, Node parent, int pCost)   //for uninformed search
    {
        this.pCost = pCost;
        this.parent = parent;
        this.city = city;
    }
    Node(String city, Node parent, int pCost, int hCost)    //for informed search
    {
        this.pCost = pCost;
        this.parent = parent;
        this.city = city;
        this.hCost = hCost;
    }
}

/*class for sorting in desccending order of the fringe on path cost*/
class nComp implements Comparator<Node>{
    public int compare(Node n1,Node n2)
    {
        if (n1.pCost>n2.pCost) return 1;
        else if (n1.pCost<n2.pCost) return -1;
        else return 0;
    }
}
class hComp implements Comparator<Node>{

    @Override
    public int compare(Node n1, Node n2) {
        if (n1.hCost>n2.hCost) return 1;
        else  if (n1.hCost<n2.hCost) return -1;
        return 0;
    }
}

public class find_route {
    /*
    * infoCity stores the information about the city and its parent and the cost between that. It creats virtual map*/
    Hashtable<String, ArrayList<String[]>> infoCity = new Hashtable<String, ArrayList<String[]>>();
    /*similar infocity but for hueristics file*/
    Hashtable<String, Integer> hueristics = new Hashtable<String,Integer>();
    /*route is to store the  shortest path form souce to destination*/
    Hashtable<String, Object[]> route = new Hashtable<String, Object[]>();
    /*nodes for storing the expanded nodes*/
    int nodes=0;

    // Function stores the input file information in infoCity.
    private void generatingMap(String start, String end, String dist)
    {
        String[] entry = {end, dist};
        if (infoCity.containsKey(start))
            infoCity.get(start).add(entry);
        else {
            ArrayList<String[]> temp = new ArrayList<String[]>();
            temp.add(entry);
            infoCity.put(start,temp);
        }
    }

    //function to separate from file to [row]][col]
    private void splitFile(String inputFile) throws IOException
    {
        File file = new File(inputFile);    //reading the file
        BufferedReader br = new BufferedReader(new FileReader(file.getPath()));
        String line;
        while (!(line=br.readLine()).equals("END OF INPUT"))    //reading till END OF INPUT is encountered
        {
            String start = line.split(" ")[0];
            String end = line.split(" ")[1];
            String dist = line.split(" ")[2];
            generatingMap(start, end,dist);     //genrating the node
            generatingMap(end, start, dist);    //if path from A to B is x, then B to A will be x
        }
    }

    //function to separate from file to [row]][col]
    private void splitHFile(String h_file) throws IOException
    {
        File file = new File(h_file);
        Scanner sc = new Scanner(new FileReader(file.getPath()));
        String line;
        while (!(line = sc.nextLine()).equals("END OF INPUT"))
        {
            hueristics.put(line.split(" ")[0].toString(),Integer.parseInt(line.split(" ")[1].toString()));
        }
    }

    //function to determine the route and stores in route
    public void determineRoute(Node node)
    {
        if (!route.containsKey(node.city) || (Integer) route.get(node.city)[1]>node.pCost){
            Object[] valueRoute = {node.parent!=null ? node.parent.city : null, node.pCost};
            route.put(node.city,valueRoute);
        }
    }
    
    //printing the route and path
    private void routeTraceBack(String dest)
    {
        String cumulativeDistance = "infinity";
        // Since the route stores the information in reverse order therefore storing it in the stack therefore making it easier to trace back the path.
        Stack<String> finalRoute = new Stack<String>();
        if (route.containsKey(dest)){
            cumulativeDistance = route.get(dest)[1]+" km";
            String parent = (String) route.get(dest)[0];
            while (parent!=null){
                int dist = (Integer)route.get(dest)[1] - (Integer)route.get(parent)[1];
                finalRoute.push(parent+" to "+dest+ ", "+dist+" km");
                dest=parent;
                parent = (String)route.get(dest)[0];
            }
        }
        StringBuffer sb = new StringBuffer();
        sb.append("nodes expanded: "+nodes+"\n");
        sb.append("distance: "+cumulativeDistance+"\n");
        sb.append("route:\n");
        if (finalRoute.isEmpty()) sb.append("none");
        else {
            while (!finalRoute.isEmpty()){
                sb.append(finalRoute.pop());
                sb.append("\n");
            }
        }
        System.out.println(sb.toString());
    }

    //for uninformed search
    private void findRoute(String inputFile, String src, String dest) throws IOException
    {
        //function to separate from file to [row]][col]
        splitFile(inputFile);
        //visitedNode for storing node visited in the route
        HashSet<String> visitedNode = new HashSet<String>();
        //fringe store the data of node on basis of path cost 
        PriorityQueue<Node> fringe = new PriorityQueue<Node>(1,new nComp());
        //intialising fringe with scource as src, dest as null and path as 0
        fringe.add(new Node(src,null,0));
        while (!fringe.isEmpty())
        {   //storing the node from fringe at index 0 to currentNode
            Node currentNode = fringe.poll();
            //increment the nodes which indicates the expanded nodes
            nodes++;
            //funcrion to check if it is visited or not. If not it enters it the route. it is like virtual map
            determineRoute(currentNode);
            //If the destination is reached then break the loop
            if (currentNode.city.equals(dest)) 
                break;
            //if the current city is in visited then skip the process
            if(visitedNode.contains(currentNode.city))
                continue;
            ArrayList<String[]> childrenCityInfo = infoCity.get(currentNode.city);
            Iterator<String[]> iter = childrenCityInfo.iterator();
            while (iter.hasNext()){
                String[] s = iter.next();
                Node n = new Node(s[0],currentNode,currentNode.pCost+Integer.parseInt(s[1]));
                fringe.add(n);
            }
            //Adding the city to visited the node
            visitedNode.add(currentNode.city);
        }
        //prints the elements of the route
        routeTraceBack(dest);
    }

    //for informed search
    private void findRoute(String inputFile, String src, String dest, String h_file) throws IOException
    {   
        //function to separate from file to [row]][col]
        splitHFile(h_file);
        //function to separate from file to [row]][col]
        splitFile(inputFile);
        //visitedNode for storing node visited in the route
        HashSet<String> visitedNode = new HashSet<String>();
        //fringe store the data of node on basis of path cost 
        PriorityQueue<Node> fringe = new PriorityQueue<Node>(1,new hComp());
        //intialising fringe with scource as src, dest as null and path as 0
        fringe.add(new Node(src,null,0,0));
        while (!fringe.isEmpty())
        {   //storing the node from fringe at index 0 to currentNode
            Node currentNode = fringe.poll();
            //increment the nodes which indicates the expanded nodes
            nodes++;
            //funcrion to check if it is visited or not. If not it enters it the route. it is like virtual map
            determineRoute(currentNode);
            //If the destination is reached then break the loop
            if (currentNode.city.equals(dest)) 
                break;
            //if the current city is in visited then skip the process
            if(visitedNode.contains(currentNode.city))
                continue;
            ArrayList<String[]> childrenCityInfo = infoCity.get(currentNode.city);
            Iterator<String[]> cCIIterator = childrenCityInfo.iterator();
            while (cCIIterator.hasNext()){
                String[] str = cCIIterator.next();
                Node node = new Node(str[0],currentNode, currentNode.pCost+Integer.parseInt(str[1]),currentNode.pCost+Integer.parseInt(str[1])+hueristics.get(str[0]));
                fringe.add(node);
            }
            //Adding the city to visited the node
            visitedNode.add(currentNode.city);
        }
        //prints the elements of the route
        routeTraceBack(dest);
    }

    //main function
    public static void main(String[] args) throws IOException
    {
        find_route findRoute = new find_route();
        // finds the shortest path without using hueristics file.
        if (args.length==3 && (args[0]!=null || args[1]!=null || args[2]!=null))
            findRoute.findRoute(args[0],args[1],args[2]);
        // finds the shortest path using hueristics file.
        else if (args.length==4 && (args[0]!=null || args[1]!=null || args[2]!=null || args[3]!=null))
            findRoute.findRoute(args[0],args[1],args[2],args[3]);
        else
            System.out.println("Please enter valid number of arguments!");
    }
}
